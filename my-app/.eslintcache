[{"C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\reportWebVitals.js":"1","C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\App.js":"2","C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\index.js":"3","S:\\tv-shows-dashboard\\my-app\\src\\index.js":"4","S:\\tv-shows-dashboard\\my-app\\src\\App.js":"5","S:\\tv-shows-dashboard\\my-app\\src\\reportWebVitals.js":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":15443,"mtime":1606989490705,"results":"9","hashOfConfig":"8"},{"size":507,"mtime":1606259789389,"results":"10","hashOfConfig":"8"},{"size":507,"mtime":1606259789389,"results":"11","hashOfConfig":"12"},{"size":16934,"mtime":1608641487484,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vhijvr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1tnao8l",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\App.js",["30","31"],"import React, { useState, useEffect } from \"react\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport \"./index.css\"\r\n\r\nconst APIKEY = '8891d5cefed0da21234ba062e1c9a7d7';\r\nconst baseURL = 'https://api.themoviedb.org/3/';\r\n// https://api.themoviedb.org/3/tv/2316/season/{season_number}?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-USt\r\n// GET /tv/{tv_id}\r\n// https://api.themoviedb.org/3/tv/2316?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-US\r\n\r\n// GET /tv/{tv_id}/season/{season_number}\r\n// https://api.themoviedb.org/3/tv/2316/season/1?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-US\r\n\r\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\r\nconst key = 'acbad60592304493a8bc92ef6cbe3f78';\r\nconst endpoint = 'https://text-analytics-ucb-datathon.cognitiveservices.azure.com/';\r\n\r\nconst textAnalyticsClient = new TextAnalyticsClient(endpoint,  new AzureKeyCredential(key));\r\n\r\n// async function sentimentAnalysis(client){\r\n\r\n//   const sentimentInput = [\r\n//       \"This product was absolutely terrible and I would never recommend this to anyone. Please remove this from the store immediately.\"\r\n//   ];\r\n//   const sentimentResult = await client.analyzeSentiment(sentimentInput);\r\n\r\n//   sentimentResult.forEach(document => {\r\n//       console.log(`ID: ${document.id}`);\r\n//       console.log(`\\tDocument Sentiment: ${document.sentiment}`);\r\n//       console.log(`\\tDocument Scores:`);\r\n//       console.log(`\\t\\tPositive: ${document.confidenceScores.positive.toFixed(2)} \\tNegative: ${document.confidenceScores.negative.toFixed(2)} \\tNeutral: ${document.confidenceScores.neutral.toFixed(2)}`);\r\n//       console.log(`\\tSentences Sentiment(${document.sentences.length}):`);\r\n//       document.sentences.forEach(sentence => {\r\n//           console.log(`\\t\\tSentence sentiment: ${sentence.sentiment}`)\r\n//           console.log(`\\t\\tSentences Scores:`);\r\n//           console.log(`\\t\\tPositive: ${sentence.confidenceScores.positive.toFixed(2)} \\tNegative: ${sentence.confidenceScores.negative.toFixed(2)} \\tNeutral: ${sentence.confidenceScores.neutral.toFixed(2)}`);\r\n//       });\r\n//   });\r\n// }\r\n\r\nfunction SearchBar(props) {\r\n  return (\r\n    <div class='center'>\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          \r\n          <div class=\"ui fluid icon input\" style={{marginTop:'8%'}}>\r\n            <input type=\"text\" name=\"show\" placeholder=\"Search for a TV Show\"/>\r\n            <i type=\"submit\" class=\"search icon\"></i>\r\n          </div>    \r\n          <div class=\"ui fluid icon input\" style={{marginTop:'7%'}}></div>      \r\n          <button class=\"ui button\" type=\"submit\">Search</button>\r\n            \r\n        </div>\r\n      </div>\r\n    </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RenderTable(props) {\r\n  if (props.data.query === \"\") {\r\n    return (\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          <div class=\"ui segment\">\r\n            Please enter a non-empty search.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n  if (props.data.query !== undefined && props.data.id === undefined) {\r\n    // if (props.data.timeout) {\r\n    //   return (\r\n    //   <div class=\"ui one column stackable center aligned page grid\">\r\n    //   <div class=\"column eight wide\">\r\n    //     <div class=\"ui segm  ent\">\r\n    //       <p>Could not find TV Show</p>\r\n    //     </div>\r\n    //   </div>\r\n    // </div>\r\n    // )}\r\n    return (\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          <div class=\"ui segment\">\r\n            <div class=\"ui active inverted dimmer\">\r\n              <div class=\"ui small text loader\">Loading... if it exists ;)</div>\r\n            </div>\r\n            <p></p><p></p><h1></h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n    // return (<h1 style={{textAlign: 'center'}}>Please enter a search query for a valid tv show.</h1>)\r\n  }\r\n  if (Object.keys(props.data).length === 0 && props.data.constructor === Object) {\r\n    return (<h1 style={{textAlign: 'center'}}>Enter a search query</h1>)\r\n  }\r\n  // TODO: GET RID OF THIS & add error handling for missing stuff\r\n  if (props.data.id === 7089) {\r\n    return (<h1 style={{textAlign: 'center'}}>Enter a search query</h1>)\r\n  }\r\n\r\n  let all_seasons = [];\r\n  let season = <th rowSpan={props.data.num_seasons + 2}><p class=\"rotate\">Season Number</p></th>;\r\n  all_seasons.push(season);\r\n  let max_episodes = 0;\r\n  for (let i = 1; i <= props.data.num_seasons; i++) {\r\n    let season_number = 'season' + i;\r\n    max_episodes = max_episodes < props.data.seasons[season_number].length ? props.data.seasons[season_number].length : max_episodes; \r\n    season = <tr>\r\n      <th>{i}</th>\r\n      {props.data.seasons[season_number].map(index => (\r\n       <td data-value={index}> {index} </td>\r\n      ))}\r\n    </tr>\r\n    all_seasons.push(season);\r\n  }\r\n\r\n  let episode_header = [];\r\n  episode_header.push(<th></th>)\r\n  episode_header.push(<th></th>)\r\n  for (let i = 1; i <= max_episodes; i++) {\r\n    episode_header.push(<th>{i}</th>)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 class='medium text' style={{textAlign: 'center'}}>{props.data.name}</h1>\r\n      <h2 style={{textAlign: 'center'}}>Average Rating Per Episode</h2>\r\n      <br/>\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <table>\r\n          <th colSpan={max_episodes + 2}>Episode Number</th>\r\n          <tbody>\r\n          <tr>{episode_header}</tr>\r\n          {all_seasons}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <br/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SimilarShows(props) {\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n  }\r\n  if (props.data.similarShows.length === 0) {\r\n    return <h2 style={{textAlign: 'center'}}>No Similar Shows</h2>\r\n  }\r\n\r\n  let arr = []\r\n  for (let i = 0; i < props.data.similarShows.length; i++) {\r\n    arr.push(\r\n      <div>\r\n      <form onSubmit={props.handleSubmit}>\r\n      <input class=\"ui button\" type=\"submit\" name=\"show\" value={props.data.similarShows[i]}></input>\r\n      </form>\r\n      </div>\r\n    )}\r\n    return (\r\n      <div>\r\n        <h2 style={{textAlign: 'center'}}>Similar Shows</h2>\r\n        <br />\r\n        <div class=\"ui one column stackable center aligned page grid\">\r\n          <div class=\"ui segment\">\r\n            <div class=\"ui buttons\">\r\n              {arr}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction Reviews(props) {\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n  }\r\n  if (props.data.reviews === null) {\r\n    return <h2 style={{textAlign: 'center'}}>No Reviews</h2>\r\n  }\r\n  return (\r\n    <div class=\"ui two column centered grid divided\">\r\n      <div class=\"three column centered row\">\r\n        <div class=\"column\">\r\n          <h2 style={{textAlign: 'center'}}>Top Positive Review</h2> <br/>\r\n          <p style={{textAlign: 'center'}} id='demo'><i>\"{props.data.reviews.positive_quote}\"</i></p>\r\n          <p style={{textAlign: 'center'}}><i>-{props.data.reviews.positive_author}</i></p>\r\n          <button onClick={() => props.handlePositiveReview(props.data.reviews)} class=\"basic ui button centered\">\r\n            Show full review\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"column\">\r\n          <h2 style={{textAlign: 'center'}}>Top Critical Review</h2> <br/>\r\n          <p id='test' style={{textAlign: 'center'}}><i>\"{props.data.reviews.negative_quote}\"</i></p>\r\n          <p style={{textAlign: 'center'}}><i>-{props.data.reviews.negative_author}</i></p>\r\n          <button onClick={() => props.handleNegativeReview(props.data.reviews)} class=\"basic ui button centered\">\r\n            Show full review\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} \r\n\r\nasync function fetchId(query) {\r\n  const url = ''.concat(baseURL, 'search/tv?api_key=', APIKEY, '&query=', encodeURIComponent(query), '&include_adult=false');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let ret = [];\r\n  if (json_response.total_pages !== 0) {\r\n    ret[0] = json_response.results[0].id\r\n    ret[1] = json_response.results[0].name\r\n  }\r\n  return json_response.total_pages !== 0 ? ret : null;\r\n}\r\n\r\nasync function fetchNumSeasons(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '?api_key=', APIKEY, '&language=en-US');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let numSeasons = 0;\r\n  for (let x = 0; x < json_response.seasons.length; x++) {\r\n    if (json_response.seasons[x].season_number !== 0) {\r\n      numSeasons += 1;\r\n    }\r\n  }\r\n  return numSeasons;\r\n}\r\n\r\nasync function fetchSeasons(id, numSeasons) {\r\n  var newSeasons = {};\r\n  for (let i = 1; i <= numSeasons; i++) {\r\n    let url = ''.concat(baseURL, 'tv/', id, '/season/', i, '?api_key=', APIKEY, '&language=en-US');\r\n    let response = await fetch(url);\r\n    let json_response = await response.json();\r\n    let episodeRatings = [];\r\n    for (let j = 0; j < json_response.episodes.length; j++) {\r\n      episodeRatings.push(json_response.episodes[j].vote_average);\r\n    }\r\n    newSeasons['season' + String(i)] = episodeRatings;\r\n  }\r\n  return newSeasons;\r\n}\r\n\r\nasync function fetchSimilarShows(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '/similar?api_key=', APIKEY, '&language=en-US&page=1');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let max = json_response.results.length < 5 ? json_response.results.length : 5;\r\n  let similarShows = []\r\n  while (similarShows.length !== max) {\r\n    let random = Math.floor(Math.random() * json_response.results.length);\r\n    if (!similarShows.includes(json_response.results[random].name)) {\r\n      similarShows.push(json_response.results[random].name);\r\n    }\r\n  }\r\n  return similarShows;\r\n}\r\n\r\nasync function fetchReviews(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '/reviews?api_key=', APIKEY, '&language=en-US&page=1');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  if (json_response.results.length === 0) {\r\n    return null;\r\n  }\r\n  let review = [];\r\n  for (let i = 0; i < json_response.results.length; i++) {\r\n    let values = [];\r\n    let maxSize = json_response.results[i].content.length > 5000 ? 5000 : json_response.results[i].content.length;\r\n    const sentimentResult = await textAnalyticsClient.analyzeSentiment([json_response.results[i].content.slice(0, maxSize)]);\r\n    sentimentResult.forEach(document => {\r\n      values.sentiment = document.sentiment;\r\n      values.positive = document.confidenceScores.positive.toFixed(2);\r\n      values.negative = document.confidenceScores.negative.toFixed(2);\r\n      values.neutral = document.confidenceScores.neutral.toFixed(2);\r\n      values.content = json_response.results[i].content\r\n    });\r\n    values.reviewer = json_response.results[i].author;\r\n    review.push(values);\r\n  }\r\n  \r\n  review.sort((a, b) => parseFloat(b.positive) - parseFloat(a.positive));\r\n  let finalReview = [];\r\n  let maxSize = review[0].content.length > 5000 ? 5000 : review[0].content.length;\r\n  let sentimentResult = await textAnalyticsClient.analyzeSentiment([review[0].content.slice(0, maxSize)]);\r\n  sentimentResult.forEach(document => {\r\n    let prevMax = -1;\r\n    let maxQuote = \"\";\r\n    document.sentences.forEach(sentence => {\r\n      let posScore = sentence.confidenceScores.positive.toFixed(2);\r\n      if (prevMax < posScore) {\r\n        prevMax = posScore;\r\n        maxQuote = sentence.text;\r\n      }\r\n    });\r\n    finalReview.positive_full = review[0].content;\r\n    finalReview.positive_quote = maxQuote;\r\n    finalReview.positive_author = review[0].reviewer;\r\n  });\r\n  \r\n\r\n  review.sort((a, b) => parseFloat(b.negative) - parseFloat(a.negative));\r\n  maxSize = review[0].content.length > 5000 ? 5000 : review[0].content.length;\r\n  sentimentResult = await textAnalyticsClient.analyzeSentiment([review[0].content.slice(0, maxSize)]);\r\n  sentimentResult.forEach(document => {\r\n    let prevMax = -1;\r\n    let maxQuote = \"\";\r\n    document.sentences.forEach(sentence => {\r\n      let posScore = sentence.confidenceScores.negative.toFixed(2);\r\n      if (prevMax <= posScore) {\r\n        prevMax = posScore;\r\n        maxQuote = sentence.text;\r\n      }\r\n    });\r\n    finalReview.negative_full = review[0].content;\r\n    finalReview.negative_quote = maxQuote;\r\n    finalReview.negative_author = review[0].reviewer;\r\n  });\r\n  \r\n  return finalReview;\r\n}\r\n\r\nfunction Page() {\r\n  const [values, setValues] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let newValues = {};\r\n    newValues.submitted = true;\r\n    // newValues.entered = true;\r\n    newValues.query = event.target.show.value;\r\n    setValues(newValues);\r\n  }\r\n\r\n  useEffect (() => {\r\n    async function fetchData() {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      // const timer = setTimeout(() => {\r\n      //   newValues.timeout = true;\r\n      //   setValues(newValues);\r\n      //   return;\r\n      // }, 7000);\r\n      newValues.submitted = false;\r\n      setValues(newValues);\r\n      if (values.query === \"\") {\r\n        return;\r\n      }\r\n\r\n      let ret = await fetchId(values.query);\r\n      if (ret === null || ret[0] === 7089) {\r\n        return;\r\n      }\r\n      // clearTimeout(timer);\r\n      \r\n      let id = ret[0]\r\n      newValues.id = id;\r\n      newValues.name = ret[1];\r\n\r\n      let numSeasons = await fetchNumSeasons(id);\r\n      let seasons = await fetchSeasons(id, numSeasons);\r\n      let similarShows = await fetchSimilarShows(id);\r\n      let reviews = await fetchReviews(id);\r\n      newValues.num_seasons = numSeasons;\r\n      newValues.seasons = seasons;\r\n      newValues.similarShows = similarShows;\r\n      newValues.reviews = reviews;\r\n      // newValues.submitted = false;\r\n      setValues(newValues);\r\n    }\r\n    fetchData();\r\n    // return () => clearTimeout(timer);\r\n  }, [values.submitted]);\r\n  \r\n  const handleNegativeReview = (event) => {\r\n    if (event !== null) {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      newValues.reviews = event;\r\n      newValues.reviews.negative_quote = newValues.reviews.negative_full;\r\n      setValues(newValues);\r\n    }\r\n  }\r\n\r\n  const handlePositiveReview = (event) => {\r\n    if (event !== null) {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      newValues.reviews = event;\r\n      newValues.reviews.positive_quote = newValues.reviews.positive_full;\r\n      setValues(newValues);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{marginTop:'5%'}}>\r\n        <h1 class='large text' style={{textAlign: 'center'}}>TV-Shows-Dashboard</h1>\r\n      </div>\r\n      \r\n      <SearchBar handleSubmit={handleSubmit} />\r\n      <br />\r\n      <RenderTable data={values}/>\r\n      <br />\r\n      <SimilarShows data={values} handleSubmit={handleSubmit}/>\r\n      <br />\r\n      <Reviews data={values} handleNegativeReview={handleNegativeReview} handlePositiveReview={handlePositiveReview}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  // sentimentAnalysis(textAnalyticsClient);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"></header>\r\n      <div><Page /></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Ryan\\info253\\tv-shows-dashboard\\my-app\\src\\index.js",["32"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// api key: 8891d5cefed0da21234ba062e1c9a7d7\n// api read access token: eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ODkxZDVjZWZlZDBkYTIxMjM0YmEwNjJlMWM5YTdkNyIsInN1YiI6IjVmOGQzYTQ1Mzk3ZGYwMDAzOTVhMjNiNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.mW_2Hf7S5Q17hc3VX0vZRVhpsNOQX9hDV7kA5pHw0e0\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);","S:\\tv-shows-dashboard\\my-app\\src\\index.js",["33"],"S:\\tv-shows-dashboard\\my-app\\src\\App.js",["34","35"],"import React, { useState, useEffect } from \"react\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport \"./index.css\"\r\n\r\nconst APIKEY = '8891d5cefed0da21234ba062e1c9a7d7';\r\nconst baseURL = 'https://api.themoviedb.org/3/';\r\n// https://api.themoviedb.org/3/tv/2316/season/{season_number}?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-USt\r\n// GET /tv/{tv_id}\r\n// https://api.themoviedb.org/3/tv/2316?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-US\r\n\r\n// GET /tv/{tv_id}/season/{season_number}\r\n// https://api.themoviedb.org/3/tv/2316/season/1?api_key=8891d5cefed0da21234ba062e1c9a7d7&language=en-US\r\n\r\n\r\n// azure analytics\r\n// const { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\r\n// const key = 'acbad60592304493a8bc92ef6cbe3f78';\r\n// const endpoint = 'https://text-analytics-ucb-datathon.cognitiveservices.azure.com/';\r\n\r\n// const textAnalyticsClient = new TextAnalyticsClient(endpoint,  new AzureKeyCredential(key));\r\n\r\n// async function sentimentAnalysis(client){\r\n\r\n//   const sentimentInput = [\r\n//       \"This product was absolutely terrible and I would never recommend this to anyone. Please remove this from the store immediately.\"\r\n//   ];\r\n//   const sentimentResult = await client.analyzeSentiment(sentimentInput);\r\n\r\n//   sentimentResult.forEach(document => {\r\n//       console.log(`ID: ${document.id}`);\r\n//       console.log(`\\tDocument Sentiment: ${document.sentiment}`);\r\n//       console.log(`\\tDocument Scores:`);\r\n//       console.log(`\\t\\tPositive: ${document.confidenceScores.positive.toFixed(2)} \\tNegative: ${document.confidenceScores.negative.toFixed(2)} \\tNeutral: ${document.confidenceScores.neutral.toFixed(2)}`);\r\n//       console.log(`\\tSentences Sentiment(${document.sentences.length}):`);\r\n//       document.sentences.forEach(sentence => {\r\n//           console.log(`\\t\\tSentence sentiment: ${sentence.sentiment}`)\r\n//           console.log(`\\t\\tSentences Scores:`);\r\n//           console.log(`\\t\\tPositive: ${sentence.confidenceScores.positive.toFixed(2)} \\tNegative: ${sentence.confidenceScores.negative.toFixed(2)} \\tNeutral: ${sentence.confidenceScores.neutral.toFixed(2)}`);\r\n//       });\r\n//   });\r\n// }\r\n\r\nfunction SearchBar(props) {\r\n  return (\r\n    <div class='center'>\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          \r\n          <div class=\"ui fluid icon input\" style={{marginTop:'8%'}}>\r\n            <input type=\"text\" name=\"show\" placeholder=\"Search for a TV Show\"/>\r\n            <i type=\"submit\" class=\"search icon\"></i>\r\n          </div>    \r\n          <div class=\"ui fluid icon input\" style={{marginTop:'7%'}}></div>      \r\n          <button class=\"ui button\" type=\"submit\">Search</button>\r\n            \r\n        </div>\r\n      </div>\r\n    </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RenderTable(props) {\r\n  if (props.data.query === \"\") {\r\n    return (\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          <div class=\"ui segment\">\r\n            Please enter a non-empty search.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n  if (props.data.query !== undefined && props.data.id === undefined) {\r\n    // if (props.data.timeout) {\r\n    //   return (\r\n    //   <div class=\"ui one column stackable center aligned page grid\">\r\n    //   <div class=\"column eight wide\">\r\n    //     <div class=\"ui segm  ent\">\r\n    //       <p>Could not find TV Show</p>\r\n    //     </div>\r\n    //   </div>\r\n    // </div>\r\n    // )}\r\n    return (\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <div class=\"column eight wide\">\r\n          <div class=\"ui segment\">\r\n            <div class=\"ui active inverted dimmer\">\r\n              <div class=\"ui small text loader\">Loading... if it exists ;)</div>\r\n            </div>\r\n            <p></p><p></p><h1></h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n    // return (<h1 style={{textAlign: 'center'}}>Please enter a search query for a valid tv show.</h1>)\r\n  }\r\n  if (Object.keys(props.data).length === 0 && props.data.constructor === Object) {\r\n    return (<h1 style={{textAlign: 'center'}}>Enter a search query</h1>)\r\n  }\r\n  // TODO: GET RID OF THIS & add error handling for missing stuff\r\n  if (props.data.id === 7089) {\r\n    return (<h1 style={{textAlign: 'center'}}>Enter a search query</h1>)\r\n  }\r\n\r\n  let all_seasons = [];\r\n  let season = <th rowSpan={props.data.num_seasons + 2}><p class=\"rotate\">Season Number</p></th>;\r\n  all_seasons.push(season);\r\n  let max_episodes = 0;\r\n  for (let i = 1; i <= props.data.num_seasons; i++) {\r\n    let season_number = 'season' + i;\r\n    max_episodes = max_episodes < props.data.seasons[season_number].length ? props.data.seasons[season_number].length : max_episodes; \r\n    season = <tr>\r\n      <th>{i}</th>\r\n      {props.data.seasons[season_number].map(index => (\r\n       <td data-value={index}> {index} </td>\r\n      ))}\r\n    </tr>\r\n    all_seasons.push(season);\r\n  }\r\n\r\n  let episode_header = [];\r\n  episode_header.push(<th></th>)\r\n  episode_header.push(<th></th>)\r\n  for (let i = 1; i <= max_episodes; i++) {\r\n    episode_header.push(<th>{i}</th>)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 class='medium text' style={{textAlign: 'center'}}>{props.data.name}</h1>\r\n      <h2 style={{textAlign: 'center'}}>Average Rating Per Episode</h2>\r\n      <br/>\r\n      <div class=\"ui one column stackable center aligned page grid\">\r\n        <table>\r\n          <th colSpan={max_episodes + 2}>Episode Number</th>\r\n          <tbody>\r\n          <tr>{episode_header}</tr>\r\n          {all_seasons}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <br/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SimilarShows(props) {\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n  }\r\n  if (props.data.similarShows.length === 0) {\r\n    return <h2 style={{textAlign: 'center'}}>No Similar Shows</h2>\r\n  }\r\n\r\n  let arr = []\r\n  for (let i = 0; i < props.data.similarShows.length; i++) {\r\n    arr.push(\r\n      <div>\r\n      <form onSubmit={props.handleSubmit}>\r\n      <input class=\"ui button\" type=\"submit\" name=\"show\" value={props.data.similarShows[i]}></input>\r\n      </form>\r\n      </div>\r\n    )}\r\n    return (\r\n      <div>\r\n        <h2 style={{textAlign: 'center'}}>Similar Shows</h2>\r\n        <br />\r\n        <div class=\"ui one column stackable center aligned page grid\">\r\n          <div class=\"ui segment\">\r\n            <div class=\"ui buttons\">\r\n              {arr}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction Reviews(props) {\r\n  if (props.data.id === undefined) {\r\n    return (<p></p>);\r\n  }\r\n  if (props.data.reviews === null) {\r\n    return <h2 style={{textAlign: 'center'}}>No Reviews</h2>\r\n  }\r\n  return (\r\n    <div class=\"ui two column centered grid divided\">\r\n      <div class=\"three column centered row\">\r\n        <div class=\"column\">\r\n          <h2 style={{textAlign: 'center'}}>Top Positive Review</h2> <br/>\r\n          <p style={{textAlign: 'center'}} id='demo'><i>\"{props.data.reviews.positive_quote}\"</i></p>\r\n          <p style={{textAlign: 'center'}}><i>-{props.data.reviews.positive_author}</i></p>\r\n          <button onClick={() => props.handlePositiveReview(props.data.reviews)} class=\"basic ui button centered\">\r\n            Show full review\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"column\">\r\n          <h2 style={{textAlign: 'center'}}>Top Critical Review</h2> <br/>\r\n          <p id='test' style={{textAlign: 'center'}}><i>\"{props.data.reviews.negative_quote}\"</i></p>\r\n          <p style={{textAlign: 'center'}}><i>-{props.data.reviews.negative_author}</i></p>\r\n          <button onClick={() => props.handleNegativeReview(props.data.reviews)} class=\"basic ui button centered\">\r\n            Show full review\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} \r\n\r\nasync function fetchId(query) {\r\n  const url = ''.concat(baseURL, 'search/tv?api_key=', APIKEY, '&query=', encodeURIComponent(query), '&include_adult=false');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let ret = [];\r\n  if (json_response.total_pages !== 0) {\r\n    ret[0] = json_response.results[0].id\r\n    ret[1] = json_response.results[0].name\r\n  }\r\n  return json_response.total_pages !== 0 ? ret : null;\r\n}\r\n\r\nasync function fetchNumSeasons(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '?api_key=', APIKEY, '&language=en-US');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let numSeasons = 0;\r\n  for (let x = 0; x < json_response.seasons.length; x++) {\r\n    if (json_response.seasons[x].season_number !== 0) {\r\n      numSeasons += 1;\r\n    }\r\n  }\r\n  return numSeasons;\r\n}\r\n\r\nasync function fetchSeasons(id, numSeasons) {\r\n  var newSeasons = {};\r\n  for (let i = 1; i <= numSeasons; i++) {\r\n    let url = ''.concat(baseURL, 'tv/', id, '/season/', i, '?api_key=', APIKEY, '&language=en-US');\r\n    let response = await fetch(url);\r\n    let json_response = await response.json();\r\n    let episodeRatings = [];\r\n    for (let j = 0; j < json_response.episodes.length; j++) {\r\n      episodeRatings.push(json_response.episodes[j].vote_average);\r\n    }\r\n    newSeasons['season' + String(i)] = episodeRatings;\r\n  }\r\n  return newSeasons;\r\n}\r\n\r\nasync function fetchSimilarShows(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '/similar?api_key=', APIKEY, '&language=en-US&page=1');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  let max = json_response.results.length < 5 ? json_response.results.length : 5;\r\n  let similarShows = []\r\n  while (similarShows.length !== max) {\r\n    let random = Math.floor(Math.random() * json_response.results.length);\r\n    if (!similarShows.includes(json_response.results[random].name)) {\r\n      similarShows.push(json_response.results[random].name);\r\n    }\r\n  }\r\n  return similarShows;\r\n}\r\n\r\nasync function fetchReviews(id) {\r\n  let url = ''.concat(baseURL, 'tv/', id, '/reviews?api_key=', APIKEY, '&language=en-US&page=1');\r\n  let response = await fetch(url);\r\n  let json_response = await response.json();\r\n  if (json_response.results.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let maxIndex = 0;\r\n  let minIndex = json_response.results.length - 1;\r\n  for (let i = 0; i < json_response.results.length; i++) {\r\n    let rate = json_response.results[i].author_details['rating'];\r\n    if (json_response.results[i].content !== \"\") {\r\n      if (json_response.results[minIndex].author_details['rating'] > rate) {\r\n        minIndex = i;\r\n      }\r\n      if (json_response.results[maxIndex].author_details['rating'] < rate) {\r\n        maxIndex = i;\r\n      }\r\n    }\r\n  }\r\n  console.log(maxIndex);\r\n  console.log(minIndex);\r\n\r\n  let finalReview = [];\r\n  finalReview.positive_full = json_response.results[maxIndex].content;\r\n  let pos_size = finalReview.positive_full.length < 100 ? finalReview.positive_full.length : 100;\r\n  finalReview.positive_quote = json_response.results[maxIndex].content.slice(0, pos_size) + \"...\";\r\n  finalReview.positive_author = json_response.results[maxIndex].author;\r\n\r\n  // let finalReview = [];\r\n  finalReview.negative_full = json_response.results[minIndex].content;\r\n  let neg_size = finalReview.positive_full.length < 100 ? finalReview.positive_full.length : 100;\r\n  finalReview.negative_quote = json_response.results[minIndex].content.slice(0, neg_size) + \"...\";\r\n  finalReview.negative_author = json_response.results[minIndex].author;\r\n\r\n  // azure analytics\r\n  // let review = [];\r\n  // for (let i = 0; i < json_response.results.length; i++) {\r\n  //   let values = [];\r\n  //   let maxSize = json_response.results[i].content.length > 5000 ? 5000 : json_response.results[i].content.length;\r\n  //   const sentimentResult = await textAnalyticsClient.analyzeSentiment([json_response.results[i].content.slice(0, maxSize)]);\r\n  //   sentimentResult.forEach(document => {\r\n  //     values.sentiment = document.sentiment;\r\n  //     values.positive = document.confidenceScores.positive.toFixed(2);\r\n  //     values.negative = document.confidenceScores.negative.toFixed(2);\r\n  //     values.neutral = document.confidenceScores.neutral.toFixed(2);\r\n  //     values.content = json_response.results[i].content\r\n  //   });\r\n  //   values.reviewer = json_response.results[i].author;\r\n  //   review.push(values);\r\n  // }\r\n  \r\n  // review.sort((a, b) => parseFloat(b.positive) - parseFloat(a.positive));\r\n  // let finalReview = [];\r\n  // let maxSize = review[0].content.length > 5000 ? 5000 : review[0].content.length;\r\n  // let sentimentResult = await textAnalyticsClient.analyzeSentiment([review[0].content.slice(0, maxSize)]);\r\n  // sentimentResult.forEach(document => {\r\n  //   let prevMax = -1;\r\n  //   let maxQuote = \"\";\r\n  //   document.sentences.forEach(sentence => {\r\n  //     let posScore = sentence.confidenceScores.positive.toFixed(2);\r\n  //     if (prevMax < posScore) {\r\n  //       prevMax = posScore;\r\n  //       maxQuote = sentence.text;\r\n  //     }\r\n  //   });\r\n  //   finalReview.positive_full = review[0].content;\r\n  //   finalReview.positive_quote = maxQuote;\r\n  //   finalReview.positive_author = review[0].reviewer;\r\n  // });\r\n  \r\n\r\n  // review.sort((a, b) => parseFloat(b.negative) - parseFloat(a.negative));\r\n  // maxSize = review[0].content.length > 5000 ? 5000 : review[0].content.length;\r\n  // sentimentResult = await textAnalyticsClient.analyzeSentiment([review[0].content.slice(0, maxSize)]);\r\n  // sentimentResult.forEach(document => {\r\n  //   let prevMax = -1;\r\n  //   let maxQuote = \"\";\r\n  //   document.sentences.forEach(sentence => {\r\n  //     let posScore = sentence.confidenceScores.negative.toFixed(2);\r\n  //     if (prevMax <= posScore) {\r\n  //       prevMax = posScore;\r\n  //       maxQuote = sentence.text;\r\n  //     }\r\n  //   });\r\n  //   finalReview.negative_full = review[0].content;\r\n  //   finalReview.negative_quote = maxQuote;\r\n  //   finalReview.negative_author = review[0].reviewer;\r\n  // });\r\n  \r\n  return finalReview;\r\n}\r\n\r\nfunction Page() {\r\n  const [values, setValues] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let newValues = {};\r\n    newValues.submitted = true;\r\n    // newValues.entered = true;\r\n    newValues.query = event.target.show.value;\r\n    setValues(newValues);\r\n  }\r\n\r\n  useEffect (() => {\r\n    async function fetchData() {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      // const timer = setTimeout(() => {\r\n      //   newValues.timeout = true;\r\n      //   setValues(newValues);\r\n      //   return;\r\n      // }, 7000);\r\n      newValues.submitted = false;\r\n      setValues(newValues);\r\n      if (values.query === \"\") {\r\n        return;\r\n      }\r\n\r\n      let ret = await fetchId(values.query);\r\n      if (ret === null || ret[0] === 7089) {\r\n        return;\r\n      }\r\n      // clearTimeout(timer);\r\n      \r\n      let id = ret[0]\r\n      newValues.id = id;\r\n      newValues.name = ret[1];\r\n\r\n      let numSeasons = await fetchNumSeasons(id);\r\n      let seasons = await fetchSeasons(id, numSeasons);\r\n      let similarShows = await fetchSimilarShows(id);\r\n      let reviews = await fetchReviews(id);\r\n      newValues.num_seasons = numSeasons;\r\n      newValues.seasons = seasons;\r\n      newValues.similarShows = similarShows;\r\n      newValues.reviews = reviews;\r\n      // newValues.submitted = false;\r\n      setValues(newValues);\r\n    }\r\n    fetchData();\r\n    // return () => clearTimeout(timer);\r\n  }, [values.submitted]);\r\n  \r\n  const handleNegativeReview = (event) => {\r\n    if (event !== null) {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      newValues.reviews = event;\r\n      newValues.reviews.negative_quote = newValues.reviews.negative_full;\r\n      setValues(newValues);\r\n    }\r\n  }\r\n\r\n  const handlePositiveReview = (event) => {\r\n    if (event !== null) {\r\n      let newValues = JSON.parse(JSON.stringify(values));\r\n      newValues.reviews = event;\r\n      newValues.reviews.positive_quote = newValues.reviews.positive_full;\r\n      setValues(newValues);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{marginTop:'5%'}}>\r\n        <h1 class='large text' style={{textAlign: 'center'}}>TV-Shows-Dashboard</h1>\r\n      </div>\r\n      \r\n      <SearchBar handleSubmit={handleSubmit} />\r\n      <br />\r\n      <RenderTable data={values}/>\r\n      <br />\r\n      <SimilarShows data={values} handleSubmit={handleSubmit}/>\r\n      <br />\r\n      <Reviews data={values} handleNegativeReview={handleNegativeReview} handlePositiveReview={handlePositiveReview}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  // sentimentAnalysis(textAnalyticsClient);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"></header>\r\n      <div><Page /></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","S:\\tv-shows-dashboard\\my-app\\src\\reportWebVitals.js",[],{"ruleId":"36","severity":1,"message":"37","line":92,"column":27,"nodeType":"38","endLine":92,"endColumn":31},{"ruleId":"39","severity":1,"message":"40","line":385,"column":6,"nodeType":"41","endLine":385,"endColumn":24,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":23},{"ruleId":"43","severity":1,"message":"44","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":94,"column":27,"nodeType":"38","endLine":94,"endColumn":31},{"ruleId":"39","severity":1,"message":"40","line":417,"column":6,"nodeType":"41","endLine":417,"endColumn":24,"suggestions":"47"},"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array.","ArrayExpression",["48"],"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar",["49"],{"desc":"50","fix":"51"},{"desc":"50","fix":"52"},"Update the dependencies array to be: [values, values.submitted]",{"range":"53","text":"54"},{"range":"55","text":"54"},[14125,14143],"[values, values.submitted]",[15616,15634]]